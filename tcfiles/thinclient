#!/bin/bash
# Thin Client RDP GUI by Henk717

shutdown_thinclient(){
    echo "Shutdown requested.. Invoking $exit_type"
    if [[ -f "desktop" || $exit_type == "Exit" || $exit_type == "exit" ]]; then
        echo Desktop file exists or shutdown defined as exit only, not shutting the device down.
        exit
    elif [[ $exit_type == "Sleep" ||  $exit_type == "sleep" ]]; then
        systemctl suspend
        $0 "$@" &
        exit
    elif [[ $exit_type == "Restart" || $exit_type == "restart" || $exit_type == "reboot" ]]; then
        systemctl reboot
    else
        systemctl poweroff
    fi
}

# Universal variables
PROTOCOL_DETECT="://"
VERSION=`cat /tcversion`

# Run second phase of the build if present
if [[ -f /usr/bin/firstboot ]]; then
    xterm -bg black -fg white -hold -e sudo /usr/bin/firstboot
fi

# Rename thinclient
hostname=$(< /etc/hostname)
if [[ $hostname == "thinclient" || -f ~/dynamic_hostname ]]; then
    if [ -f /sys/class/net/eth0/address ];then
        read newhost </sys/class/net/eth0/address
        newhost=TC-${newhost//[:]/}
    elif [ -f /sys/class/net/wlan0/address ];then
        read newhost </sys/class/net/wlan0/address
        newhost=TC-${newhost//[:]/}
    else
        newhost="thinclient"
    fi

    if [[ "$hostname" != "$newhost" ]]; then
        sudo set-hostname $newhost
        hostname=$newhost
    fi
fi

# This module is to load configs in a safe manner, if someone malicious were to add commands to the bash config files they will not be executed
load_config ()
{
    if [[ -f "$1" ]]; then
        while IFS='=' read -r key value || [[ -n "$key" ]]; do
            # Ignore empty lines and comments
            [[ -z "$key" || "$key" =~ ^# ]] && continue
            
            # Ensure the key is a valid variable name and replace hostname if needed
            if [[ "$key" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                # Replace tchostname with the up to date hostname
                value=${value/tc_hostname/"$hostname"}

                # Remove quotes to mimic source behavior
                value="${value#\"}"  # Strip leading quote
                value="${value%\"}"  # Strip trailing quote

                # Assign only if value is not empty
                if [[ -n "$value" ]]; then
                    export "$key=$value"
                else
                    unset "$key"
                fi
            else
                echo "Skipping potentially unsafe entry: $key"
            fi
        done < "$1"
    else
        echo "$1 does not exist, ignoring import"
    fi
}

# Config file (down)loading and also the start of the main UI routine
if [ -f ~/tcconfig ];then
    load_config ~/config_url
    load_config ~/tcconfig

    if [[ $config_url ]]; then
        config_url_invalid="$config_url"
        curl -fLo ~/tcconfig $config_url
        # If downloads fail we try the last successful one just in case someone made a typo, if its successful we backup the working URL
        if [ $? -ne 0 ]; then
            echo "Download failed, trying backup URL"
            load_config ~/config_url
            curl -fLo ~/tcconfig $config_url
            config_url="Config URL $config_url_invalid failed to download, the above settings are from a backup."  # This was a dilemma since it can pick either one from the file depending on external servers, lets just warn instead. In an automatic scenario this is not saved, even if the admin ends up saving this the backup URL should revert it again.
        else
            # Double check what we received has a config_url before replacing our known one
            if grep -F "config_url=" ~/tcconfig ;then
                echo "Valid config received, updating config_url"
                echo config_url=$config_url > ~/config_url
                # Quick reload in case things changed, spares the user the reboot
                load_config ~/tcconfig
            else
                # Something didn't go right and we did not use the new URL successfully
                load_config ~/config_url
                curl -fLo ~/tcconfig $config_url
                load_config ~/tcconfig
                if [ "$config_url_invalid" == "$config_url" ]; then
                    config_url="Config URL $config_url_invalid was invalid and a backup was used." # This was a dilemma since it can pick either one from the file depending on external servers, lets just warn instead. In an automatic scenario this is not saved, even if the admin ends up saving this the backup URL should revert it again.
                fi
            fi
        fi
    fi

    load_config ~/tcconfig_override

    # Some values used to be hardcoded but are important, we define the old hardcoded variables here in case they are missing from production configs
    if [[ -z "$exit_type" ]]; then
        exit_type="Shutdown"
    fi

    if [[ -z "$login_timeout" ]]; then
        login_timeout="600"
    fi

    # Apply system configuration
    pamixer -u --allow-boost --set-volume $volume
    pamixer -u --default-source --allow-boost --set-volume $microphone
    light -S $brightness
    setxkbmap $keylayout
    xset dpms 0 $screen_timeout 0


    # Handle multiple servers
    server_list=$server # We duplicate this so that a full list remains available, that way we don't break the existing code and configs
    IFS='|' read -r -a servers <<< "$server_list"
    if [ "${#servers[@]}" -ge 2 ]; then
        yad_list=""
        for s in "${servers[@]}"; do
            yad_list+="$s\n"
        done

        yad_list=$(echo -e "$yad_list" | sed '/^$/d')
        selected=$(echo -e "$yad_list" | yad --list --center --window-icon=changes-preven --button=$exit_type:1 --button=Select:0 --timeout=$login_timeout --title="Network Login | $VERSION" --column="Server Name" --width 300 --height 300)
        OUTPUT_RESULTS=$?
        if ((OUTPUT_RESULTS != 0)); then
            shutdown_thinclient
        fi
        server=$(echo "$selected" | sed 's/[|[:space:]]*$//')
    else
        server="${servers[0]}"
    fi

    # Citrix
    if [ "$server" = "citrix" ];then
        yad --center --title=Loading --button="Please wait" --timeout=1
        if [ "$?" == "70" ];then
            if [ -f /opt/Citrix/ICAClient/selfservice ];then
                if [[ -n "$param" && "$(cat ~/.ICAClient/param)" != "$param" ]]; then
                    echo Store URL incorrect, trying to reconfigure
                    rm -rf ~/.ICAClient
                    /opt/Citrix/ICAClient/util/storebrowse -a "$param" && echo $param > ~/.ICAClient/param
                    if [ ! -f ~/.ICAClient/param ];then
                        echo "Something went wrong, we have no configuration. Restarting..."
                        $0 "$@" &
                        exit
                    fi
                fi
                /opt/Citrix/ICAClient/util/storebrowse -c SharedUserMode=True
                /opt/Citrix/ICAClient/selfservice
                shutdown_thinclient
            fi
        fi
    fi

    # RDP File support, this will break the server string for the other modes so we do it last
    if [[ "$server" == *"$PROTOCOL_DETECT"* ]]; then
        curl -m 5 -fLs "$server" | enconv -L none -x UTF-8 > ~/destination.tmp && [ -s ~/destination.tmp ] && mv ~/destination.tmp ~/destination.rdp
        rdp_destination="~/destination.rdp"
    else
        rdp_destination="/v:"$server
    fi

    # Login Dialogue
    OUTPUT=$(yad --form --center --window-icon=changes-prevent --image=dialog-password --button=$exit_type:1 --button=Connect:0 --timeout=$login_timeout --title="Network Login | $VERSION" \
        --text="Enter your network credentials below" \
        --separator=$'\x1F' \
        --field="Username" \
        --field="Password":h)
    OUTPUT_RESULTS=$?
    if ((OUTPUT_RESULTS != 0)); then
        shutdown_thinclient
    fi
    Blank=""
    username=$(printf '%q' "$(awk -F'\x1F' '{print $1}' <<<"$OUTPUT")")
    password=$(printf '%q' "$(awk -F'\x1F' '{print $2}' <<<"$OUTPUT")")

fi

# Password commands
if [ "$password" = $adminpass"kill" ];then
    exit 0
fi

if [ "$password" = $adminpass"terminal" ];then
    xterm -bg black -fg white
    $0
    exit 0
fi

if [ "$password" = "ping" ];then
    if [[ "$server" == *"$PROTOCOL_DETECT"* ]]; then
        mtr $(cat ~/destination.rdp | grep "full address:s:" | sed 's/full address:s://g' | sed 's/:.*//g' | tr -d '\r' | tr -d '\n')
    else
        mtr $( echo "$server" | sed 's/:.*//g' )
    fi
    if (($? != 0)); then
        yad --title="Error" --text "Something went wrong, will open the ping tool with localhost as the destination instead" --button="Ok"
        mtr
    fi
    $0
    exit 0
fi

if [ "$password" = "ip" ];then
    yad --title="Network Information"  --center --text="Hostname: $hostname\nLocal IP: $(hostname --all-ip-addresses || hostname -I)\nPublic IP: $(curl -4 ifconfig.me)\n$(resolvectl status | grep "DNS Servers" | sed -e 's/^[ \t]*//')\nGateway: $(ip route | awk '/default/ { print $3 }')" --button="Ok"
    $0
    exit 0
fi

# This section handles the default configuration and configuration dialogue
if [ ! -f ~/tcconfig ];then
    yad --info --ellipsize=middle --center --title="User Friendly Thin Client $VERSION by Henk.Tech" --text="You have not yet configured your thin client and a configuration screen will now open.\nTo access this configuration screen at a later time use config as the login password.\nYou can also use the login password terminal to access the terminal.\n\nNOTE: If you enter an admin password you will need to type this in front of the commands,\nthis version stores that password in plain text so do not submit your usual administrator passwords.\n\nCommands:\nconfig: Configuration screen\nterminal: Interactive Terminal\nping (Without password): My Traceroute\nip (Without password): Show IP information\nkill: Shut down this tool"
    password=config
    helpdesk="the helpdesk"
    volume="100"
    microphone="100"
    brightness="50"
    login_timeout="600"
    screen_timeout="600"
    exit_type="Shutdown"
fi

if [ "$password" = $adminpass"config" ];then
    server=$server_list
    OUTPUT=$(yad --form --center --window-icon=changes-allow --image=preferences-system --title="Configuration Utility | $VERSION" \
        --text="This will replace the configuration file with the provided settings" \
        --separator=$'\x1F' \
        --field="RDP Configuration":lbl --align=center "" \
        --field="Server" "$server" \
        --field="Domain" "$domain" \
        --field="Parameters" "$param" \
        --field="Dialog Configuration":lbl --align=center "" \
        --field="Admin Password":h "$adminpass" \
        --field="Helpdesk Contact" "$helpdesk" \
        --field="Login Timeout in Seconds" "$login_timeout" \
        --field="OS Configuration":lbl --align=center "" \
        --field="Speaker Volume" "$volume" \
        --field="Microphone Volume" "$microphone" \
        --field="Screen Brightness" "$brightness" \
        --field="Screen Standby Timeout in Seconds" "$screen_timeout" \
        --field="Keyboard Layout (RDP is separate)" "$keylayout" \
        --field="Exit Type (Shutdown/Sleep/Restart)" "$exit_type" \
        --field="Remote Configuration":lbl --align=center "" \
        --field="Remote Config Location" "$config_url" )
    OUTPUT_RESULTS=$?
    if ((OUTPUT_RESULTS == 0)); then
        echo server=\"$(awk -F'\x1F' '{print $2}' <<<$OUTPUT)\" > ~/tcconfig
        echo domain=\"$(awk -F'\x1F' '{print $3}' <<<$OUTPUT)\" >> ~/tcconfig
        echo param=\"$(awk -F'\x1F' '{print $4}' <<<$OUTPUT)\" >> ~/tcconfig
        echo adminpass=\"$(awk -F'\x1F' '{print $6}' <<<$OUTPUT)\" >> ~/tcconfig
        echo helpdesk=\"$(awk -F'\x1F' '{print $7}' <<<$OUTPUT)\" >> ~/tcconfig
        echo login_timeout=\"$(awk -F'\x1F' '{print $8}' <<<$OUTPUT)\" >> ~/tcconfig
        echo volume=\"$(awk -F'\x1F' '{print $10}' <<<$OUTPUT)\" >> ~/tcconfig
        echo microphone=\"$(awk -F'\x1F' '{print $11}' <<<$OUTPUT)\" >> ~/tcconfig
        echo brightness=\"$(awk -F'\x1F' '{print $12}' <<<$OUTPUT)\" >> ~/tcconfig
        echo screen_timeout=\"$(awk -F'\x1F' '{print $13}' <<<$OUTPUT)\" >> ~/tcconfig
        echo keylayout=\"$(awk -F'\x1F' '{print $14}' <<<$OUTPUT)\" >> ~/tcconfig
        echo exit_type=\"$(awk -F'\x1F' '{print $15}' <<<$OUTPUT)\" >> ~/tcconfig
        echo config_url=\"$(awk -F'\x1F' '{print $17}' <<<$OUTPUT)\" >> ~/tcconfig
    else
        yad --error --title="Error" --center --ellipsize=middle --text="Configuration cancelled or failed"
    fi
    $0 "$@" &
    exit 0
fi

# We passed all the UI's and now try to launch RDP
echo "Start of session" > session.log
if [ "$server" != "citrix" ];then
    # Because we are about to bash -c we sanetize the inputs which bash -c will convert back properly
    rdp_destination=$(printf '%q' "$rdp_destination")
    domain=$(printf '%q' "$domain")
    param=$(printf '%q' "$param")
    hostname=$(printf '%q' "$hostname")
    # Username and Password are already sanetized during input, we don't do it twice.
    bash -c "WLOG_APPENDER=file WLOG_FILEAPPENDER_OUTPUT_FILE_NAME=session.log WLOG_FILEAPPENDER_OUTPUT_FILE_PATH=. xfreerdp3 $rdp_destination /d:$domain /u:$username /p:$password /multimon +multitouch /cert:ignore /f /network:auto /sound:rate:44100,channel:2 /dynamic-resolution /usb:auto +drives +auto-reconnect +multitransport /client-hostname:$hostname $param" # Somehow this only works when wrapped in bash otherwise it cant understand the positional argument
fi

# RDP is no longer running, we diagnose why
if ! grep -F "BY_USER" session.log;then
    grep -F "ERRCONNECT_LOGON_FAILURE" session.log && yad --error --timeout=900 --title="Error" --center --ellipsize=middle --text="The Login attempt has failed.\nPlease try again or contact $helpdesk if the issue persists."
    grep -F "ERRCONNECT_WRONG_PASSWORD" session.log && yad --error --timeout=900 --title="Error" --center --ellipsize=middle --text="You have entered incorrect login information.\nPlease try again."
    grep -F "ERRCONNECT_CONNECT_FAILED" session.log && yad --error --timeout=900 --title="Error" --center --ellipsize=middle --text="We could not establish a connection with the server $server, restart this device and contact $helpdesk if the issue persists after 5 minutes."
    grep -F "ERRCONNECT_DNS_NAME_NOT_FOUND" session.log && yad --error --timeout=900 --title="Error" --center --ellipsize=middle --text="We could not find a server called $server, restart this device and contact $helpdesk if the issue persists after 5 minutes."
    grep -F "ERRCONNECT_AUTHENTICATION_FAILED" session.log && yad --error --timeout=900 --title="Error" --center --ellipsize=middle --text="The server was unable to verify your credentials.\nIf you still experience this error after 10 minutes please contact $helpdesk."
    grep -F "ERRCONNECT_CONNECT_TRANSPORT_FAILED" session.log && yad --error --timeout=900 --title="Error" --center --ellipsize=middle --text="We have encountered a server issue.\nThis can have the following causes.\n\nThe server is unable to take your connection at this time.\nYour account does not have permissions to access the server but was not locked out.\nThe server $server is not the correct server.\nThere was another issue on this machine or network that prevented the connection from succeeding.\n\nPlease reboot the machine, if you are still unable to login after this contact $helpdesk"
    grep -F "ERRCONNECT_PASSWORD_MUST_CHANGE" session.log && yad --error --timeout=900 --title="Error" --center --ellipsize=middle --text="Your password has expired and needs to be changed, please contact $helpdesk for assistance."
    grep -F "ERRCONNECT_ACCOUNT_DISABLED" session.log && yad --error --timeout=900 --title="Error" --center --ellipsize=middle --text="You can not login with this account.\nContact $helpdesk for more information."
    grep -F "ERRCONNECT_ACCOUNT_LOCKED_OUT" session.log && yad --error --timeout=900 --title="Error" --center --ellipsize=middle --text="Your account has been locked out because of to many failed attempts, please contact $helpdesk and ask for an account unlock (Accounts may unlock automatically after enough time has passed)."
    grep -F "ERRCONNECT_ACCOUNT_RESTRICTION" session.log && yad --error --timeout=900 --title="Error" --center --ellipsize=middle --text="You are unable to login because of an account restriction.\nFor example you may not be allowed to login at this hour or day.\nPlease contact $helpdesk for more information."
    grep -F "ERRINFO_SERVER" session.log && yad --error --title="Error" --timeout=900 --center --ellipsize=middle --text="Server connection failed.\nPlease try again, restart the device and otherwise contact $helpdesk for assistance."
    grep -F "ERRINFO_LICENSE" session.log && yad --error --title="Error" --timeout=900 --center --ellipsize=middle --text="To many accounts are currently logged in.\n Please inform $helpdesk ."
    grep -F "ERRINFO_OUT_OF_MEMORY" session.log && yad --error --title="Error" --timeout=900 --center --ellipsize=middle --text="The server $server ran out of memory.\n Please inform $helpdesk ."
    grep -F "ERRINFO_CB_DESTINATION_NOT_FOUND" session.log && yad --error --timeout=900 --title="Error" --center --ellipsize=middle --text="The server $server could not be reached, restart this device and contact $helpdesk if the issue persists."
    grep -F "ERRINFO_CB_DESTINATION_POOL_NOT_FREE" session.log && yad --error --timeout=900 --title="Error" --center --ellipsize=middle --text="The server $server did not have a session available for you.\nTry again in 10 minutes and contact $helpdesk if the issue persists."
    grep -F "ERRINFO_CB_CONNECTION_ERROR_INVALID_SETTINGS" session.log && yad --error --timeout=900 --title="Error" --center --ellipsize=middle --text="Invalid settings.\n Please contact $helpdesk and inform them the settings used are \n$server\n$param."
fi

# Restart the application, this will fetch updated configs and return us to the login screen
password=""
$0 "$@" &
